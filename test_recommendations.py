#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥—Ä—É–∑–µ–π
"""

import requests
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://127.0.0.1:8000"
API_ENDPOINT = f"{BASE_URL}/api/friends/recommendations/"

def test_recommendations_endpoint():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoint —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥—Ä—É–∑–µ–π
    """
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥—Ä—É–∑–µ–π...")
    print(f"üìç URL: {API_ENDPOINT}")
    
    # –¢–µ—Å—Ç 1: –ó–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
    try:
        response = requests.get(API_ENDPOINT)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"   –û—Ç–≤–µ—Ç: {response.text[:200]}..." if len(response.text) > 200 else f"   –û—Ç–≤–µ—Ç: {response.text}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ (—Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º)
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º:")
    headers = {
        'Authorization': 'Token 42be1e56-b481-4f26-af9b-1e0f1ee730d1',
        'Content-Type': 'application/json'
    }
    
    try:
        response = requests.get(API_ENDPOINT, headers=headers)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç!")
            print(f"   üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:")
            print(f"      - recommendations: {len(data.get('recommendations', []))} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            print(f"      - total_count: {data.get('total_count', 'N/A')}")
            print(f"      - algorithm_version: {data.get('algorithm_version', 'N/A')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
            if data.get('recommendations'):
                first_rec = data['recommendations'][0]
                print(f"   üéØ –ü—Ä–∏–º–µ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                print(f"      - username: {first_rec.get('username', 'N/A')}")
                print(f"      - recommendation_score: {first_rec.get('recommendation_score', 'N/A')}")
                print(f"      - common_interests: {first_rec.get('common_interests', [])}")
                print(f"      - mutual_friends_count: {first_rec.get('mutual_friends_count', 'N/A')}")
        else:
            print(f"   ‚ö†Ô∏è  –û—Ç–≤–µ—Ç: {response.text[:300]}..." if len(response.text) > 300 else f"   –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º limit
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º limit=5:")
    try:
        response = requests.get(f"{API_ENDPOINT}?limit=5", headers=headers)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ –õ–∏–º–∏—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω–æ: {len(data.get('recommendations', []))} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        else:
            print(f"   ‚ö†Ô∏è  –û—Ç–≤–µ—Ç: {response.text[:200]}..." if len(response.text) > 200 else f"   –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:")
    print("   - –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    print("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏")
    print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –µ—Å—Ç—å —Å–≤—è–∑–∏ –¥—Ä—É–∂–±—ã –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")

if __name__ == "__main__":
    test_recommendations_endpoint()