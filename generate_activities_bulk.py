#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 generate_activities_bulk.py
"""

import os
import sys
import django
from datetime import datetime, timedelta
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'server.settings')
sys.path.append('/Users/behruz/Documents/Kadio-Backend-')
django.setup()

from django.utils import timezone
from apps.api_auth.models import UserModel
from apps.user_activitys.models import UserActivity


def generate_realistic_activities(count=5000, clear_existing=False):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    Args:
        count (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        clear_existing (bool): –û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    """
    print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é {count} –∑–∞–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
    if clear_existing:
        existing_count = UserActivity.objects.count()
        UserActivity.objects.all().delete()
        print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ {existing_count} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = list(UserModel.objects.all())
    if not users:
        print("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–Ω–∞—á–∞–ª–∞.")
        return
    
    print(f"üë• –ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω - —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    now = timezone.now()
    start_of_month = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    end_of_month = (start_of_month + timedelta(days=32)).replace(day=1) - timedelta(seconds=1)
    
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {start_of_month.strftime('%d.%m.%Y')} - {end_of_month.strftime('%d.%m.%Y')}")
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –≤–µ—Å–∞–º–∏ (–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–º–µ—é—Ç –±–æ–ª—å—à–∏–π –≤–µ—Å)
    weighted_actions = [
        # –ß–∞—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–≤–µ—Å 10)
        ('–í–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É', 10),
        ('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ø—Ä–æ—Ñ–∏–ª—å', 8),
        ('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 7),
        ('–í—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 9),
        
        # –°—Ä–µ–¥–Ω–∏–µ –ø–æ —á–∞—Å—Ç–æ—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è (–≤–µ—Å 5)
        ('–û–±–Ω–æ–≤–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 5),
        ('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', 5),
        ('–û—Ç–º–µ—Ç–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ', 6),
        ('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', 4),
        ('–£–≤–µ–ª–∏—á–∏–ª —Å–µ—Ä–∏—é –¥–Ω–µ–π', 3),
        
        # –†–µ–¥–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (–≤–µ—Å 2)
        ('–ó–∞–≥—Ä—É–∑–∏–ª –∞–≤–∞—Ç–∞—Ä', 2),
        ('–ò–∑–º–µ–Ω–∏–ª –ø–∞—Ä–æ–ª—å', 2),
        ('–û–±–Ω–æ–≤–∏–ª –±–∏–æ–≥—Ä–∞—Ñ–∏—é', 2),
        ('–ò–∑–º–µ–Ω–∏–ª —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å', 1),
        ('–ü–æ–ª—É—á–∏–ª –Ω–æ–≤—ã–π –∑–Ω–∞—á–æ–∫', 3),
        ('–û–±–Ω–æ–≤–∏–ª –∏–Ω—Ç–µ—Ä–µ—Å—ã', 2),
        
        # –û—á–µ–Ω—å —Ä–µ–¥–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (–≤–µ—Å 1)
        ('–ò–∑–º–µ–Ω–∏–ª email', 1),
        ('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª email', 1),
        ('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª –ø–∞—Ä–æ–ª—å', 1),
        ('–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª –¥–∞–Ω–Ω—ã–µ', 1),
        ('–°–æ–∑–¥–∞–ª —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é', 1),
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        ('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ª–µ–Ω—Ç—É –Ω–æ–≤–æ—Å—Ç–µ–π', 6),
        ('–ü–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫', 8),
        ('–û—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', 4),
        ('–ü–æ–¥–µ–ª–∏–ª—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º', 3),
        ('–î–æ–±–∞–≤–∏–ª –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', 4),
        ('–í—ã–ø–æ–ª–Ω–∏–ª –ø–æ–∏—Å–∫', 5),
        ('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', 4),
        ('–û–±–Ω–æ–≤–∏–ª —Å—Ç–∞—Ç—É—Å', 3),
        ('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥—Ä—É–ø–ø–µ', 2),
        ('–ü–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É', 1),
        ('–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ', 6),
        ('–ü—Ä–æ—á–∏—Ç–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ', 7),
        ('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≥–∞–ª–µ—Ä–µ—é', 3),
        ('–ó–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ', 2),
        ('–£–¥–∞–ª–∏–ª —Ñ–æ—Ç–æ', 1),
        ('–ò–∑–º–µ–Ω–∏–ª –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å', 1),
        ('–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 1),
        ('–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 1),
        ('–ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 2),
        ('–û—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 1),
    ]
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
    actions_pool = []
    for action, weight in weighted_actions:
        actions_pool.extend([action] * weight)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    activities_to_create = []
    user_daily_activities = {}  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–Ω—è–º
    
    print("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
    
    for i in range(count):
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –∏—Ö "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
        # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã —á–µ–º –¥—Ä—É–≥–∏–µ
        if random.random() < 0.3:  # 30% —à–∞–Ω—Å –≤—ã–±—Ä–∞—Ç—å "—Å—É–ø–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = random.choice(users[:min(3, len(users))])  # –ü–µ—Ä–≤—ã–µ 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã
        else:
            user = random.choice(users)
        
        # –í—ã–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
        action = random.choice(actions_pool)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –≤—Ä–µ–º—è
        # –ë–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã (9-18) –∏ –º–µ–Ω—å—à–µ –Ω–æ—á—å—é (0-6)
        random_day = random.randint(0, (end_of_month - start_of_month).days)
        base_date = start_of_month + timedelta(days=random_day)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —á–∞—Å–∞–º (–±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–Ω–µ–º)
        hour_weights = {
            range(0, 6): 1,    # –ù–æ—á—å - –Ω–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            range(6, 9): 3,    # –£—Ç—Ä–æ - —Å—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            range(9, 12): 8,   # –£—Ç—Ä–æ —Ä–∞–±–æ—á–µ–µ - –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            range(12, 14): 6,  # –û–±–µ–¥ - —Å—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            range(14, 18): 9,  # –î–µ–Ω—å —Ä–∞–±–æ—á–∏–π - –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            range(18, 21): 7,  # –í–µ—á–µ—Ä - –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            range(21, 24): 4,  # –ü–æ–∑–¥–Ω–∏–π –≤–µ—á–µ—Ä - —Å—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        }
        
        # –í—ã–±–∏—Ä–∞–µ–º —á–∞—Å —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
        hour_pool = []
        for hour_range, weight in hour_weights.items():
            for hour in hour_range:
                hour_pool.extend([hour] * weight)
        
        hour = random.choice(hour_pool)
        minute = random.randint(0, 59)
        second = random.randint(0, 59)
        
        random_timestamp = base_date.replace(hour=hour, minute=minute, second=second)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity = UserActivity(
            user=user,
            action=action,
            timestamp=random_timestamp
        )
        activities_to_create.append(activity)
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        day_key = random_timestamp.date()
        if day_key not in user_daily_activities:
            user_daily_activities[day_key] = set()
        user_daily_activities[day_key].add(user.username)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if (i + 1) % 500 == 0:
            print(f"üìä –°–æ–∑–¥–∞–Ω–æ {i + 1}/{count} –∑–∞–ø–∏—Å–µ–π ({((i + 1)/count*100):.1f}%)")
    
    # –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
    print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É...")
    UserActivity.objects.bulk_create(activities_to_create, batch_size=1000)
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò:")
    print("=" * 50)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    user_stats = {}
    for activity in activities_to_create:
        username = activity.user.username
        user_stats[username] = user_stats.get(username, 0) + 1
    
    print(f"\nüë• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º ({len(user_stats)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):")
    for username, activity_count in sorted(user_stats.items(), key=lambda x: x[1], reverse=True):
        percentage = (activity_count / count) * 100
        print(f"  üìä {username}: {activity_count} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π ({percentage:.1f}%)")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
    action_stats = {}
    for activity in activities_to_create:
        action = activity.action
        action_stats[action] = action_stats.get(action, 0) + 1
    
    print(f"\nüéØ –¢–æ–ø-15 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:")
    sorted_actions = sorted(action_stats.items(), key=lambda x: x[1], reverse=True)[:15]
    for i, (action, action_count) in enumerate(sorted_actions, 1):
        percentage = (action_count / count) * 100
        print(f"  {i:2d}. {action}: {action_count} —Ä–∞–∑ ({percentage:.1f}%)")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
    daily_stats = {}
    for activity in activities_to_create:
        day = activity.timestamp.date()
        daily_stats[day] = daily_stats.get(day, 0) + 1
    
    print(f"\nüìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º (—Ç–æ–ø-10):")
    sorted_days = sorted(daily_stats.items(), key=lambda x: x[1], reverse=True)[:10]
    for day, day_count in sorted_days:
        print(f"  üìÜ {day.strftime('%d.%m.%Y')}: {day_count} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Å–∞–º
    hourly_stats = {}
    for activity in activities_to_create:
        hour = activity.timestamp.hour
        hourly_stats[hour] = hourly_stats.get(hour, 0) + 1
    
    print(f"\nüïê –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —á–∞—Å–∞–º:")
    for hour in sorted(hourly_stats.keys()):
        count_hour = hourly_stats[hour]
        bar = "‚ñà" * (count_hour // 20)  # –ü—Ä–æ—Å—Ç–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        print(f"  {hour:2d}:00 - {count_hour:4d} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π {bar}")
    
    print("\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {UserActivity.objects.count()}")


if __name__ == "__main__":
    print("üéØ –°–∫—Ä–∏–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("=" * 50)
    
    # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–¥–µ—Å—å
    COUNT = 2000  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    CLEAR_EXISTING = False  # –û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    
    try:
        generate_realistic_activities(count=COUNT, clear_existing=CLEAR_EXISTING)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()